{"version":3,"sources":["logo.svg","components/card.js","components/slideshow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","className","src","this","props","url","alt","name","debut","episodes","voice","React","Component","Slideshow","state","simpsons","slide","slides","map","key","id","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,6wCCuB5BC,G,mMAhBX,OACE,wBAAIC,UAAU,QACd,wBAAIA,UAAU,eACd,yBAAKC,IAAKC,KAAKC,MAAMC,IAAKC,IAAKH,KAAKC,MAAMG,OAC1C,4BAAKJ,KAAKC,MAAMG,OAEhB,wBAAIN,UAAU,aACd,qCAAWE,KAAKC,MAAMI,OACtB,wCAAcL,KAAKC,MAAMK,UACzB,8CAAoBN,KAAKC,MAAMM,a,GAZlBC,IAAMC,Y,OCqCVC,E,YAnCb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXC,cAHe,E,sEAoBjB,IAAIC,EAAQb,KAAKC,MAAMa,OAAOC,KAAI,SAACF,GACjC,OAAO,kBAAC,EAAD,CAAMG,IAAKH,EAAMI,GAAIf,IAAKW,EAAMX,IAAKE,KAAMS,EAAMT,KACxDC,MAAOQ,EAAMR,MAAOC,SAAUO,EAAMP,SAAUC,MAAOM,EAAMN,WAG7D,OACE,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,uBACZe,Q,GA7BaJ,aCiETS,E,YA/Db,aAAgB,IAAD,8BACb,+CACKP,MAAQ,CACXC,SAAU,CACR,CAACK,GAAI,EACHf,IAAK,2DACNE,KAAM,mBACNC,MAAO,wBACPC,SAAU,IACVC,MAAO,eAER,CAACU,GAAI,EACHf,IAAK,2DACLE,KAAM,mBACNC,MAAO,wBACPC,SAAU,IACVC,MAAO,eAET,CAACU,GAAI,EACHf,IAAK,2DACLE,KAAM,mBACNC,MAAO,wBACPC,SAAU,IACVC,MAAO,eAET,CAACU,GAAI,EACHf,IAAK,2DACLE,KAAM,mBACNC,MAAO,wBACPC,SAAU,IACVC,MAAO,eAET,CAACU,GAAI,EACHf,IAAK,2DACLE,KAAM,mBACNC,MAAO,wBACPC,SAAU,IACVC,MAAO,iBArCA,E,sEA8Cb,OACE,yBAAKT,UAAU,OACf,4BAAQA,UAAU,cAClB,yBAAKC,IAAKoB,IAAMrB,UAAU,WAAWK,IAAI,SACzC,uDAGA,uBAAGL,UAAU,YAAb,kBAIA,kBAAC,EAAD,CAAWgB,OAAQd,KAAKW,MAAMC,gB,GA1DlBH,aCMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e7547c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './card.css';\r\n// import Button from './button';\r\n\r\nclass Card extends React.Component {\r\n  render () {\r\n\r\n    return (\r\n      <dl className=\"card\">\r\n      <dt className=\"card-header\">\r\n      <img src={this.props.url} alt={this.props.name}/>\r\n      <h4>{this.props.name}</h4>\r\n      </dt>\r\n      <dt className=\"card-body\">\r\n      <p>Debut: {this.props.debut}</p>\r\n      <p>Episodes: {this.props.episodes}</p>\r\n      <p>Original voice: {this.props.voice}</p>\r\n      </dt>\r\n      </dl>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport './slideshow.css';\r\nimport Card from './card';\r\nimport { simpsons } from '../data.json';\r\n\r\nclass Slideshow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      simpsons\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // const details = this.state.simpsons.details.map((detail, i) => {\r\n    //   return (\r\n    //     <Card\r\n    //       key={i}\r\n    //       picture={detail.picture}\r\n    //       name={detail.name}\r\n    //       debut={detail.debut}\r\n    //       episodes={detail.episodes}\r\n    //       voice={detail.voice}\r\n    //     />\r\n    //   )\r\n    // });\r\n    let slide = this.props.slides.map((slide) => {\r\n      return <Card key={slide.id} url={slide.url} name={slide.name}\r\n      debut={slide.debut} episodes={slide.episodes} voice={slide.voice}/>\r\n    })\r\n\r\n    return (\r\n      <div className=\"card-slider \">\r\n        <div className=\"card-slider-wrapper\">\r\n          {slide}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slideshow;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Slideshow from './components/slideshow';\n// import { simpsons } from './data.json';\n\nclass App extends Component {\n  constructor () {\n    super ();\n    this.state = {\n      simpsons: [\n        {id: 1,\n          url: \"https://img.webme.com/pic/l/los-simpson-v2/new4_good.gif\",\n        \tname: \"Dr. Nick Riviera\",\n        \tdebut: \"Jannuary 10th of 1991\",\n        \tepisodes: \"4\",\n        \tvoice: \"Hank Azaria\"\n        },\n        {id: 2, \n          url: \"https://img.webme.com/pic/l/los-simpson-v2/new4_good.gif\",\n          name: \"Dr. Nick Riviera\",\n          debut: \"Jannuary 10th of 1991\",\n          episodes: \"4\",\n          voice: \"Hank Azaria\"\n        },\n        {id: 3,\n          url: \"https://img.webme.com/pic/l/los-simpson-v2/new4_good.gif\",\n          name: \"Dr. Nick Riviera\",\n          debut: \"Jannuary 10th of 1991\",\n          episodes: \"4\",\n          voice: \"Hank Azaria\"\n        },\n        {id: 4,\n          url: \"https://img.webme.com/pic/l/los-simpson-v2/new4_good.gif\",\n          name: \"Dr. Nick Riviera\",\n          debut: \"Jannuary 10th of 1991\",\n          episodes: \"4\",\n          voice: \"Hank Azaria\"\n        },\n        {id: 5,\n          url: \"https://img.webme.com/pic/l/los-simpson-v2/new4_good.gif\",\n          name: \"Dr. Nick Riviera\",\n          debut: \"Jannuary 10th of 1991\",\n          episodes: \"4\",\n          voice: \"Hank Azaria\"\n        }\n      ]\n\n    }\n  }\n\n  render () {\n\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n      Hello there, and welcome\n      </p>\n      <p className=\"App-link\">\n      Keep learning\n      </p>\n      </header>\n      <Slideshow slides={this.state.simpsons}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}